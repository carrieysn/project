package com.cifpay.lc.fastdfs;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.HashSet;
import java.util.Set;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.FileCopyUtils;

import com.cifpay.lc.core.autoconfigure.fastdfs.FastdfsAutoConfiguration;
import com.github.tobato.fastdfs.domain.MateData;
import com.github.tobato.fastdfs.domain.StorePath;
import com.github.tobato.fastdfs.service.FastFileStorageClient;

/**
 * 测试FastDFS文件上传
 * 
 * 
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { FastDFSClientTest.class, FastdfsAutoConfiguration.class })
@Configuration
public class FastDFSClientTest {

	@Autowired
	private FastFileStorageClient client;

	@BeforeClass
	public static void setSystemProps() {
		System.setProperty("lcPage.uri", "http://192.168.163.25:8080");
		System.setProperty("fastdfs.strTrackerList", "192.168.163.25:22122");
		System.setProperty("fastdfs.connectTimeout", "30000");
		System.setProperty("fastdfs.soTimeout", "30000");
		System.setProperty("fastdfs.soTimeout", "600000");
		System.setProperty("fastdfs.charset", "UTF-8");
		System.setProperty("lcPage.currentTemplateVersion", "v1.00");
	}

	@AfterClass
	public static void clearSystemProps() {
		System.clearProperty("lcPage.uri");
		System.clearProperty("fastdfs.strTrackerList");
		System.clearProperty("fastdfs.connectTimeout");
		System.clearProperty("fastdfs.soTimeout");
		System.clearProperty("fastdfs.soTimeout");
		System.clearProperty("fastdfs.charset");
		System.clearProperty("lcPage.currentTemplateVersion");
	}

	@Bean
	public static PropertyPlaceholderConfigurer propertyPlaceholderConfigurer() {
		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();
		ppc.setIgnoreResourceNotFound(true);
		return ppc;
	}

	@Test
	public void testFdfsUploadFile() {
		try {
			File file = new File("d:\\tmp\\test.txt");
			byte[] bytes = FileCopyUtils.copyToByteArray(file);

			Set<MateData> metaDataSet = new HashSet<MateData>();
			MateData md = new MateData("helloKey", "helloValue");
			metaDataSet.add(md);

			StorePath cpath = client.uploadFile(new ByteArrayInputStream(bytes), bytes.length, "txt", metaDataSet);
			System.out.println("StorePath - group: " + cpath.getGroup());
			System.out.println("StorePath - path: " + cpath.getPath());
			System.out.println("StorePath - fullpath: " + cpath.getFullPath());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
