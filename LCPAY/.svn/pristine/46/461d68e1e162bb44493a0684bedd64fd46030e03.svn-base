package com.cifpay.lc.std.business.message.lc;

import com.alibaba.fastjson.JSON;
import com.cifpay.lc.api.BusinessInput;
import com.cifpay.lc.api.BusinessOutput;
import com.cifpay.lc.api.gateway.lc.RecvLcService;
import com.cifpay.lc.api.message.lc.AutoRecvLcMessageService;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.constant.enums.AccountPropertyType;
import com.cifpay.lc.constant.enums.MessageEnum;
import com.cifpay.lc.core.cache.pojo.MerchantCache;
import com.cifpay.lc.core.cache.service.MerchantCacheServant;
import com.cifpay.lc.core.common.CoreBusinessContext;
import com.cifpay.lc.core.common.CoreBusinessInterceptorConfig;
import com.cifpay.lc.core.db.dao.MessageDao;
import com.cifpay.lc.core.db.pojo.Message;
import com.cifpay.lc.core.exception.CoreBusinessException;
import com.cifpay.lc.core.exception.CoreValidationRejectException;
import com.cifpay.lc.domain.lc.RecvLcInputBean;
import com.cifpay.lc.domain.lc.RecvLcOutputBean;
import com.cifpay.lc.domain.message.LcRecvParamBean;
import com.cifpay.lc.domain.message.MessageInputBean;
import com.cifpay.lc.domain.message.MessageOutputBean;
import com.cifpay.lc.exception.MessageBusinessException;
import com.cifpay.lc.std.business.message.LcMessageServiceBase;
import com.cifpay.lc.std.interceptor.BusinessLoggingInterceptor;
import com.cifpay.lc.std.interceptor.MessageLockInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

@Service("autoRecvLcMessageService")
@CoreBusinessInterceptorConfig({BusinessLoggingInterceptor.class, MessageLockInterceptor.class})
public class AutoRecvLcMessageServiceImpl extends LcMessageServiceBase<MessageInputBean, MessageOutputBean> implements AutoRecvLcMessageService {

    @Autowired
    private MessageDao messageDao;

    @Autowired
    private MerchantCacheServant merchantCacheServant;

    @Autowired
    private RecvLcService recvLcService;

    @Override
    protected void validate(MessageInputBean inputBean, CoreBusinessContext context)
            throws CoreValidationRejectException {
        Message message = messageDao.selectByPrimaryKey(inputBean.getMsgId());
        if (message == null) {
            throw new MessageBusinessException(ReturnCode.CORE_MSG_NOT_FOUND_EXCEPTION_N108001, "message不存在");
        }
        context.setAttribute("LC_OPEN_MESSAGE", message);

        if (StringUtils.isEmpty(message.getParams())) {
            throw new MessageBusinessException(ReturnCode.SERVER_PARAM_ERROR, "消息参数不正确，不能为空");
        }
        LcRecvParamBean autoFlowBean = JSON.parseObject(message.getParams(), LcRecvParamBean.class);
        context.setAttribute("AUTO_FLOW_BEAN", autoFlowBean);

        MerchantCache merInfo = merchantCacheServant.getMerchantCache(autoFlowBean.getMerId());
        if (merInfo == null) {
            throw new MessageBusinessException(ReturnCode.CORE_MSG_NOT_FOUND_EXCEPTION_N108001, "商户信息不存在");
        }
        context.setAttribute("MERCHANT", merInfo);
    }

    @Override
    protected BusinessOutput<MessageOutputBean> _processBusiness(MessageInputBean inputBean, CoreBusinessContext context)
            throws CoreBusinessException {

        Message message = (Message) context.getAttribute("LC_OPEN_MESSAGE");
        LcRecvParamBean autoFlowBean = (LcRecvParamBean) context.getAttribute("AUTO_FLOW_BEAN");

        MerchantCache merInfo = (MerchantCache) context.getAttribute("MERCHANT");

        RecvLcInputBean recvLcInputBean = new RecvLcInputBean();
        recvLcInputBean.setLcId(autoFlowBean.getLcId());
        recvLcInputBean.setMerId(autoFlowBean.getMerId());
        recvLcInputBean.setRecvAccountType(AccountPropertyType.CORPORATE);
        recvLcInputBean.setRecvBankAccountNo(merInfo.getDefPayeeBankAcct());
        recvLcInputBean.setRecvBankCode(merInfo.getDefPayeeBankCode());
        recvLcInputBean.setRecvMobile("");

        BusinessOutput<RecvLcOutputBean> output = recvLcService.execute(new BusinessInput<RecvLcInputBean>(recvLcInputBean));

        if (output.isSuccess()) {
            return BusinessOutput.success(new MessageOutputBean(true));
        } else {
            BusinessOutput<MessageOutputBean> result = BusinessOutput.fail(ReturnCode.CORE_PRE_LC_RECV_FAIL_N106405, "收证不成功");
            if (message.getCount() >= MessageEnum.MAX_COUNT) {
                result.setData(new MessageOutputBean(true));
            }
            return result;
        }
    }

}
