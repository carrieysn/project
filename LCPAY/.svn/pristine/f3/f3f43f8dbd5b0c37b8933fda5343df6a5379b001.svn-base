package com.cifpay.lc.bankadapter.unionpay.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.alibaba.dubbo.common.utils.StringUtils;
import com.cifpay.lc.bankadapter.api.constant.TradeConstant;
import com.cifpay.lc.bankadapter.api.input.AbsTradeParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.OpenCifParam;
import com.cifpay.lc.bankadapter.api.output.AbsBusinessResult;
import com.cifpay.lc.bankadapter.api.output.GeneralTradeResult;
import com.cifpay.lc.bankadapter.unionpay.constant.UnionPayConfig;
import com.cifpay.lc.bankadapter.unionpay.output.DingCertficationResult;
import com.cifpay.lc.bankadapter.unionpay.util.DataUtil;
import com.cifpay.lc.bankadapter.unionpay.util.EncryptDataUtil;
import com.cifpay.lc.bankadapter.unionpay.util.HttpClient;
import com.cifpay.lc.bankadapter.unionpay.util.UnionPaySettingUtil;
import com.cifpay.lc.bankadapter.universal.IBankDeal;
import com.cifpay.lc.bankadapter.universal.tool.StringTool;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.core.db.dao.AdminLcMerchantDao;
import com.cifpay.lc.core.db.dao.LcTrdUnionPayFlowDao;
import com.cifpay.lc.core.db.dao.TrdCodeDescDao;
import com.cifpay.lc.core.db.pojo.AdminLcMerchant;
import com.cifpay.lc.core.db.pojo.TrdCodeDesc;
import com.cifpay.lc.core.db.pojo.TrdUnionPayFlow;
import com.cifpay.lc.core.exception.BankAdapterException;
import com.cifpay.lc.core.uid.LcTrdFlowIdWorker;

/**
 * 
 * 实名认证
 * 
 * @author Administrator
 *
 */
@Component
public class UnionPayDingCertificationDeal implements IBankDeal {

	private static Logger LOGGER = LoggerFactory.getLogger(UnionPayDingCertificationDeal.class);

	@Autowired
	private LcTrdFlowIdWorker idWork;

	@Autowired
	private LcTrdUnionPayFlowDao unionPayFlowDao;

	@Autowired
	private TrdCodeDescDao trdCodeDescDao;

	@Autowired
	private AdminLcMerchantDao adminLcMerchantDao;

	@Override
	public String getBankCode() {
		// TODO Auto-generated method stub
		return TradeConstant.TRADE_CONFIG.TRADE_UNION_PAY + TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_DINGGOU_REAL_AUTH;
	}

	@Override
	public AbsBusinessResult bankDeal(AbsTradeParam tradeParam) throws Exception {
		// TODO Auto-generated method stub
		OpenCifParam param = (OpenCifParam) tradeParam;
		// 1. 转换发送银联参数
		Map<String, String> requestData = transToReqData(param);
		LOGGER.info("银联订购-实名认证请求数据！ {}", StringTool.printMap(requestData));

		// 2. 插入流水记录 TODO 设置状态为未明
		TrdUnionPayFlow flowInfo = insertUnionPayFlow(param);

		// 3. 发送请求
		String requestBackUrl = UnionPayConfig.backTransUrl;
		Map<String, String> responseData = HttpClient.post(requestData, requestBackUrl,
				UnionPaySettingUtil.encoding_UTF8);
		LOGGER.info("银联订购-实名认证请求返回数据！{} ", StringTool.printMap(responseData));

		GeneralTradeResult result = null;
		if (!responseData.isEmpty()) {
			if (EncryptDataUtil.validate(responseData, UnionPaySettingUtil.encoding_UTF8)) {
				// 4. 判断交易结果
				// 同步返回结果类 DingCertficationResult.java TODO
				// 只是更新流水时用的bean,可以不需要，直接从返回的Map获取。
				DingCertficationResult certficationResult = (DingCertficationResult) DataUtil
						.convertMap(DingCertficationResult.class, responseData);
				String respCode = responseData.get("respCode");
				result = new GeneralTradeResult();
				// TODO 将返回码与系统码进行转换
				result = transToSysParam(result, respCode);
				result.setFlowId(flowInfo.getFlowId());
				result.setTradeResult(UnionPaySettingUtil.transRespCode(respCode));
				// 业务需求参数 需设置 TODO 将银联返回内容放至map
				result.setResultMap(responseData);
				// 5. 请求返回后 更新银联交易渠道流水信息 TODO 将结果控制两个结果控制栏位存入流水表。
				updateUnionPayFlow(certficationResult, flowInfo.getFlowId());
			} else {
				LOGGER.info("验证签名结果[失败].");
				// 验签失败，需解决验签问题
				throw new BankAdapterException(ReturnCode.CORE_BA_RESULT_EXCEPTON_N105501, "验证签名结果[失败].");
			}
		} else {
			throw new BankAdapterException(ReturnCode.CORE_BA_RESULT_FAILRESP_N105502, "未获取到返回报文或返回http状态码非200.");

		}
		return result;
	}

	public GeneralTradeResult transToSysParam(GeneralTradeResult result, String respCode) {
		TrdCodeDesc codeDesc = new TrdCodeDesc();
		codeDesc.setPlatformId(TradeConstant.TRADE_CONFIG.TRADE_UNION_PAY);
		codeDesc.setRespCode(respCode);
		TrdCodeDesc getCodeDesc = trdCodeDescDao.selectBySelective(codeDesc);
		int sysCode = 0;
		String resultDesc = "";
		if (null == getCodeDesc) {
			sysCode = ReturnCode.CORE_BA_UNDEFINE_N105999;
		} else {
			sysCode = DataUtil.isEmpty(getCodeDesc.getSysCode()) ? ReturnCode.CORE_BA_UNDEFINE_N105999
					: Integer.valueOf(getCodeDesc.getSysCode());
			resultDesc = getCodeDesc.getSysDesc();
		}
		result.setSysReturnCode(sysCode);
		result.setResultDesc(resultDesc);
		return result;
	}

	// 记录银联交易渠道流水信息
	public TrdUnionPayFlow insertUnionPayFlow(OpenCifParam param) {

		TrdUnionPayFlow payFlow = new TrdUnionPayFlow();
		long flowId = idWork.nextId();
		payFlow.setFlowId(flowId);
		payFlow.setBusinessId(param.getBusinessId());
		payFlow.setLcId(param.getLcId());
		payFlow.setMerId(param.getMerId());
		payFlow.setSubMerId(param.getSubMerId());
		payFlow.setTxnTime(param.getTxnTime());
		payFlow.setCurrencyCode(param.getCurrencyCode());// 为空默认156
		payFlow.setTxnAmt(Long.valueOf(param.getTxnAmt()));
		payFlow.setOrderId(param.getOrderId());
		payFlow.setTxnType(UnionPaySettingUtil.certificate_txnType);
		payFlow.setTxnSubType(UnionPaySettingUtil.certificate_txnSubType);
		payFlow.setSyncTradeResult(UnionPaySettingUtil.TRADE_RESULT__UNKNOWN);
		payFlow.setInsertTime(new Date());
		unionPayFlowDao.insertSelective(payFlow);
		return payFlow;

	}

	// 请求返回后 更新银联交易渠道流水信息
	public void updateUnionPayFlow(DingCertficationResult result, long flowId) {

		TrdUnionPayFlow updataFlow = new TrdUnionPayFlow();
		String respCode = result.getRespCode();
		updataFlow.setFlowId(flowId);
		updataFlow.setSyncRespCode(result.getRespCode());
		updataFlow.setSyncRespMsg(result.getRespMsg());
		updataFlow.setSyncTradeResult(UnionPaySettingUtil.transRespCode(respCode));
		updataFlow.setLastUpdTime(new Date());
		unionPayFlowDao.updateUnionPayFlow(updataFlow);
	}

	public Map<String, String> transToReqData(OpenCifParam param) {

		Map<String, String> inputParam = new HashMap<String, String>();

		inputParam.put("version", UnionPaySettingUtil.version);
		inputParam.put("encoding", UnionPaySettingUtil.encoding_UTF8);
		inputParam.put("signMethod", UnionPaySettingUtil.signMethod);
		inputParam.put("txnType", UnionPaySettingUtil.certificate_txnType);
		inputParam.put("txnSubType", UnionPaySettingUtil.certificate_txnSubType);
		inputParam.put("bizType", UnionPaySettingUtil.consume_bizType);
		inputParam.put("channelType", UnionPaySettingUtil.channelType);
		String merId = UnionPaySettingUtil.getDingGouMerId();
		inputParam.put("merId", merId);
		param.setMerId(merId);
		String subMerId = param.getSubMerId();// 二级商户代码
		inputParam.put("subMerId", subMerId);
		AdminLcMerchant merChant = adminLcMerchantDao.selectMerchantInfos(subMerId);
		if (null == merChant) {
			LOGGER.info("二级商户信息不能为空");
			throw new BankAdapterException(ReturnCode.CORE_BA_PARAM_EXCEPTION_N105001, "二级商户信息不能为空.");
		}
		inputParam.put("subMerName", merChant.getMerchantName());// 二级商户名称
		inputParam.put("subMerAbbr", merChant.getMerSiteName());// 二级商户简称
		inputParam.put("accessType", UnionPaySettingUtil.accessType);// 平台类商户
		inputParam.put("orderId", param.getOrderId());
		inputParam.put("txnTime", param.getTxnTime());
		inputParam.put("accType", StringUtils.isEmpty(param.getAccType()) ? "01" : param.getAccType());
		Map<String, String> customerInfoMap = new HashMap<String, String>();
		customerInfoMap.put("certifTp", param.getCertifTp());
		customerInfoMap.put("certifId", param.getCertifId());
		customerInfoMap.put("customerNm", param.getCustomerNm());
		customerInfoMap.put("phoneNo", param.getPhoneNo());
		customerInfoMap.put("cvn2", param.getCvn2());
		customerInfoMap.put("expired", param.getExpired());
		// 加密账号
		String accNo = EncryptDataUtil.encryptData(param.getAccNo(), UnionPaySettingUtil.encoding_UTF8);
		inputParam.put("accNo", accNo);
		inputParam.put("encryptCertId", EncryptDataUtil.getEncryptCertId());// 加密证书的certId，配置在acp_sdk.properties文件
																			// acpsdk.encryptCert.path属性下
		//// 加密证书的certId，配置在acp_sdk.properties文件 acpsdk.encryptCert.path属性下
		String customerInfoStr = EncryptDataUtil.getCustomerInfoWithEncrypt(customerInfoMap, null,
				UnionPaySettingUtil.encoding_UTF8);
		inputParam.put("customerInfo", customerInfoStr);
		// inputParam.put("reqReserved",
		// "subMerId="+subMerId+"&lcId="+param.getLcId());//透传字段
		inputParam.put("backUrl", UnionPaySettingUtil.backDingCertificationUrl);

		// inputParam = EncryptDataUtil.sign(inputParam,
		// UnionPaySettingUtil.encoding_UTF8);
		inputParam = UnionPaySettingUtil.signData(inputParam, merChant.getAdminCredentials());
		// contentData.put("reqReserved", "111");
		return inputParam;
	}

}
