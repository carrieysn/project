package com.cifpay.lc.std.sched.task;

import com.cifpay.lc.api.message.MqMessageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.cifpay.lc.constant.enums.MessageEnum;

@Component
public class LcRetryMessageTask extends BaseTask {

    @Autowired
    private MqMessageService messageService;

    /**
     * 开证结果通知商户定时业务
     * 每1分钟执行一次,扫描cifpay_message表获取消息记录，
     * 条件为:
     * 1:当前时间 >= plan_time
     * 2:状态为待处理
     * 3：每次最大取50条
     * 4：每次定时任务执行，处理完所有符合条件的消息
     * 5：增加分布式锁，避免多个节点部署scheduler处理资源竞争问题，解决HA问题
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void handleOpenLcNotify() {
        String threadName = Thread.currentThread().getName();
        if (logger.isInfoEnabled()) {
            logger.info("============= 开始处理LC相关消息 ，threadName:{}==================", threadName);
        }

        messageService.retryMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.OPENLC_NOTIFY, null);

        if (logger.isInfoEnabled()) {
            logger.info("============= 处理LC相关消息结束 ，threadName:{}==================", threadName);
        }
    }
    
    /**
     * 异步通知商户定时业务
     * 每1分钟执行一次,扫描cifpay_message表获取消息记录，
     * 条件为:
     * 1:当前时间 >= plan_time
     * 2:状态为待处理
     * 3：每次最大取50条
     * 4：每次定时任务执行，处理完所有符合条件的消息
     * 5：增加分布式锁，避免多个节点部署scheduler处理资源竞争问题，解决HA问题
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void handleNotifyMerch() {
        String threadName = Thread.currentThread().getName();
        if (logger.isInfoEnabled()) {
            logger.info("============= 开始处理LC相关消息 ，threadName:{}==================", threadName);
        }

        messageService.retryMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.NOTIFY_MERCH, null);

        if (logger.isInfoEnabled()) {
            logger.info("============= 处理LC相关消息结束 ，threadName:{}==================", threadName);
        }
    }

    /**
     * 自动收证
     * 每1分钟执行一次,扫描cifpay_message表获取消息记录，
     * 条件为:
     * 1:当前时间 >= plan_time
     * 2:状态为待处理
     * 3：每次最大取50条
     * 4：每次定时任务执行，处理完所有符合条件的消息
     * 5：增加分布式锁，避免多个节点部署scheduler处理资源竞争问题，解决HA问题
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void handleAutoRecvLc() {
        String threadName = Thread.currentThread().getName();
        if (logger.isInfoEnabled()) {
            logger.info("============= 开始处理LC相关消息 ，threadName:{}==================", threadName);
        }

        messageService.retryMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.RECVLC, null);

        if (logger.isInfoEnabled()) {
            logger.info("============= 处理LC相关消息结束 ，threadName:{}==================", threadName);
        }
    }

    /**
     * 自动履约
     * 每1分钟执行一次,扫描cifpay_message表获取消息记录，
     * 条件为:
     * 1:当前时间 >= plan_time
     * 2:状态为待处理
     * 3：每次最大取50条
     * 4：每次定时任务执行，处理完所有符合条件的消息
     * 5：增加分布式锁，避免多个节点部署scheduler处理资源竞争问题，解决HA问题
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void handleAutoAppointmentLc() {
        String threadName = Thread.currentThread().getName();
        if (logger.isInfoEnabled()) {
            logger.info("============= 开始处理LC相关消息 ，threadName:{}==================", threadName);
        }

        messageService.retryMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.APPOINTMENTLC, null);


        if (logger.isInfoEnabled()) {
            logger.info("============= 处理LC相关消息结束 ，threadName:{}==================", threadName);
        }
    }

    /**
     * 自动申请解付
     * 每1分钟执行一次,扫描cifpay_message表获取消息记录，
     * 条件为:
     * 1:当前时间 >= plan_time
     * 2:状态为待处理
     * 3：每次最大取50条
     * 4：每次定时任务执行，处理完所有符合条件的消息
     * 5：增加分布式锁，避免多个节点部署scheduler处理资源竞争问题，解决HA问题
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void handleAutoApplyLc() {
        String threadName = Thread.currentThread().getName();
        if (logger.isInfoEnabled()) {
            logger.info("============= 开始处理LC相关消息 ，threadName:{}==================", threadName);
        }

        messageService.retryMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.APPLYLC, null);

        if (logger.isInfoEnabled()) {
            logger.info("============= 处理LC相关消息结束 ，threadName:{}==================", threadName);
        }
    }

    /**
     * 自动申请转账
     * 每1分钟执行一次,扫描cifpay_message表获取消息记录，
     * 条件为:
     * 1:当前时间 >= plan_time
     * 2:状态为待处理
     * 3：每次最大取50条
     * 4：每次定时任务执行，处理完所有符合条件的消息
     * 5：增加分布式锁，避免多个节点部署scheduler处理资源竞争问题，解决HA问题
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void handleAutoTransferLc() {
        String threadName = Thread.currentThread().getName();
        if (logger.isInfoEnabled()) {
            logger.info("============= 开始处理LC相关消息 ，threadName:{}==================", threadName);
        }

        messageService.retryMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.TRANSFERLC, null);

        if (logger.isInfoEnabled()) {
            logger.info("============= 处理LC相关消息结束 ，threadName:{}==================", threadName);
        }
    }
}
