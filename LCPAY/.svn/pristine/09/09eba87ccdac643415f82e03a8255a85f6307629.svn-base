package com.cifpay.lc.gateway.integration.advice;

import com.cifpay.lc.api.BusinessOutput;
import com.cifpay.lc.api.security.SecurityService;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.domain.security.FinalSignedMerchantResponse;
import com.cifpay.lc.domain.security.MerchantRequest;
import com.cifpay.lc.gateway.common.exception.GatewayException;
import com.cifpay.lc.gateway.common.exception.GatewayProcessException;
import com.cifpay.lc.domain.security.MerchantResponseData;
import com.cifpay.lc.util.MethodParameterUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.MethodParameter;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

/**
 * 加工响应给商户的结果报文对象
 */
public class MerchantResponseBodyAdvice implements ResponseBodyAdvice<Object> {

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private SecurityService securityService;

    @Override
    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {
        Type rtnType = MethodParameterUtils.getGenericType(returnType);
        if (null != rtnType && rtnType instanceof Class) {
            Class<?> rtnClz = (Class<?>) rtnType;
            if (MerchantResponseData.class.isAssignableFrom(rtnClz)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, Class<? extends HttpMessageConverter<?>> selectedConverterType, ServerHttpRequest request, ServerHttpResponse response) {
        try {
            MerchantResponseData resData = (MerchantResponseData) body;
            FinalSignedMerchantResponse finalResponse = signMerchantResponseData(resData);
            return finalResponse;
        } catch (GatewayException e) {
            Map<String, String> signResponseDataFailed = new HashMap<String, String>();
            signResponseDataFailed.put("returnCode", String.valueOf(e.getReturnCode()));
            signResponseDataFailed.put("returnMsg", e.getMessage());
            return signResponseDataFailed;
        } catch (Throwable e) {
            Map<String, String> signResponseDataFailed = new HashMap<String, String>();
            signResponseDataFailed.put("returnCode", String.valueOf(ReturnCode.UNKNOWN_ERROR));
            signResponseDataFailed.put("returnMsg", "系统繁忙");
            return signResponseDataFailed;
        }
    }

    private FinalSignedMerchantResponse signMerchantResponseData(MerchantResponseData resData) throws GatewayProcessException {
        // 取出RequestBodyAdvice阶段暂存的MerchantRequest对象
        @SuppressWarnings("unchecked")
        MerchantRequest<Object> merReq = (MerchantRequest<Object>) RequestContextHolder.getRequestAttributes().getAttribute(MerchantRequest.MER_REQUEST_ATTR_KEY, RequestAttributes.SCOPE_REQUEST);
        if (null == merReq) {
            logger.error("在对Controller输出处理时未能找到期望的MerchantRequest对象");
            throw new GatewayProcessException(ReturnCode.UNKNOWN_ERROR, "签名处理失败");
        }

        String merId = merReq.getMerId();
        if (null == merId || 0 == merId.length()) {
            // should never happen
            logger.error("MerchantRequest对象中merId的值为空");
            throw new GatewayProcessException(ReturnCode.GW_GENERIC_VALIDATION_REJECTED, "请求参数中缺少商户ID");
        }

        BusinessOutput<FinalSignedMerchantResponse> encryptOutput = securityService.encryptData(merId, resData);

        FinalSignedMerchantResponse finalResponse = encryptOutput.getData();

        return finalResponse;
    }

}
