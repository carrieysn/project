package com.cifpay.lc.std.component.impl;

import com.cifpay.lc.api.BusinessOutput;
import com.cifpay.lc.api.message.MqMessageService;
import com.cifpay.lc.api.security.SecurityService;
import com.cifpay.lc.constant.enums.MessageEnum;
import com.cifpay.lc.core.http.HttpUtils;
import com.cifpay.lc.domain.message.LcNotifyParamBean;
import com.cifpay.lc.domain.message.SendMessageOutput;
import com.cifpay.lc.domain.security.FinalSignedMerchantResponse;
import com.cifpay.lc.std.component.NotifyService;
import com.cifpay.lc.std.domain.component.notify.AbstractNotifyBean;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by sweet on 16-11-2.
 */
@Component
public class HttpNotifyServiceImpl implements NotifyService {

	private final Logger logger = LoggerFactory.getLogger(getClass());
    /*
    @Autowired
    private SecurityService securityService;

    @Autowired
    private HttpUtils httpServant;*/
    
    @Autowired
    private MqMessageService messageService;


    @Override
    public BusinessOutput notify(String merId, String url, AbstractNotifyBean notifyBean) {
        //TODO: 修改为异步
		logger.info("通知商户：" + url);
		Map map = new ObjectMapper().convertValue(notifyBean, Map.class);
    	LcNotifyParamBean notifyParamBean = new LcNotifyParamBean();
    	notifyParamBean.setMerId(merId);
    	notifyParamBean.setNotifyUrl(url);
    	notifyParamBean.setMap(map);
    	return messageService.sendMessage(MessageEnum.MsgType.LC, MessageEnum.Scene.NOTIFY_MERCH, notifyParamBean);
		
        /*// 加密参数
        Map map = new ObjectMapper().convertValue(notifyBean, Map.class);
        BusinessOutput<FinalSignedMerchantResponse> encryptResponse = securityService.encryptData(merId, map);
        if (encryptResponse.isFailed()) {
            return BusinessOutput.fail(encryptResponse.getReturnCode(), encryptResponse.getReturnMsg());
        }

        FinalSignedMerchantResponse data = encryptResponse.getData();

        Map<String, String> request = new HashMap<>();
        request.put("encodedJsonData", data.getEncodedJsonData());
        request.put("sign", data.getSign());

        // 商户收到通知后响应信息
        String response = httpServant.post(url, request);//MerchantRequest<?>
        // 返回 success 通知成功，返回其他，失败
        // 重试 2的n次方乘10

        logger.info("通知商户结果：" + response);
        return BusinessOutput.success(null);
        */
    }
}
