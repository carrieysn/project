package com.cifpay.lc.bankadapter.unionpay.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.cifpay.lc.bankadapter.api.constant.TradeConstant;
import com.cifpay.lc.bankadapter.api.input.AbsTradeParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.RefundCifParam;
import com.cifpay.lc.bankadapter.api.output.AbsBusinessResult;
import com.cifpay.lc.bankadapter.api.output.GeneralTradeResult;
import com.cifpay.lc.bankadapter.unionpay.constant.UnionPayConfig;
import com.cifpay.lc.bankadapter.unionpay.output.ConsumeUndoResult;
import com.cifpay.lc.bankadapter.unionpay.util.DataUtil;
import com.cifpay.lc.bankadapter.unionpay.util.EncryptDataUtil;
import com.cifpay.lc.bankadapter.unionpay.util.HttpClient;
import com.cifpay.lc.bankadapter.unionpay.util.UnionPaySettingUtil;
import com.cifpay.lc.bankadapter.universal.IBankDeal;
import com.cifpay.lc.bankadapter.universal.tool.StringTool;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.core.db.dao.AdminLcMerchantDao;
import com.cifpay.lc.core.db.dao.LcTrdUnionPayFlowDao;
import com.cifpay.lc.core.db.dao.TrdCodeDescDao;
import com.cifpay.lc.core.db.pojo.AdminLcMerchant;
import com.cifpay.lc.core.db.pojo.TrdCodeDesc;
import com.cifpay.lc.core.db.pojo.TrdUnionPayFlow;
import com.cifpay.lc.core.exception.BankAdapterException;
import com.cifpay.lc.core.uid.LcTrdFlowIdWorker;
/**
 * 
 * Token 消费撤销
 * @author Administrator
 *
 */
@Component
public class UnionPayTokenConsumeUndoDeal implements IBankDeal {

	
	private static Logger LOGGER = LoggerFactory.getLogger(UnionPayTokenConsumeUndoDeal.class);

	@Autowired
	private LcTrdFlowIdWorker idWork;

	@Autowired
	private LcTrdUnionPayFlowDao unionPayFlowDao;
	
	@Autowired
	private TrdCodeDescDao trdCodeDescDao;
	
	@Autowired
	private AdminLcMerchantDao adminLcMerchantDao;

	@Override
	public String getBankCode() {
		// TODO Auto-generated method stub
		return TradeConstant.TRADE_CONFIG.TRADE_UNION_PAY + TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_WU_CONSUME_UNDO;
	}

	@Override
	public AbsBusinessResult bankDeal(AbsTradeParam tradeParam)
			throws Exception {
		// TODO Auto-generated method stub
		RefundCifParam param = (RefundCifParam) tradeParam;
		Map<String, String> undoRequestData = transToReqData(param);
		LOGGER.info("无跳转Token-消费撤销请求数据！ {}", StringTool.printMap(undoRequestData));
		// 记录银联渠道交易流水信息
		TrdUnionPayFlow flowInfo = insertUnionPayFlow(param);

		String requestBackUrl = UnionPayConfig.backTransUrl;
		Map<String, String> responseData = HttpClient.post(undoRequestData, requestBackUrl,
				UnionPaySettingUtil.encoding_UTF8);
		LOGGER.info("无跳转Token-消费撤销请求返回数据！ ", StringTool.printMap(responseData));
		GeneralTradeResult result = null;
		if(!responseData.isEmpty()){
			if(EncryptDataUtil.validate(responseData, UnionPaySettingUtil.encoding_UTF8)){
				String respCode = responseData.get("respCode");
				// 同步返回结果类 DingConsumeResult.java
				ConsumeUndoResult consumeUndoResult = (ConsumeUndoResult) DataUtil
						.convertMap(ConsumeUndoResult.class, responseData);
				// 请求返回后 更新银联交易渠道流水信息
				updateUnionPayFlow(consumeUndoResult, flowInfo.getFlowId());
				result = new GeneralTradeResult();
				result.setFlowId(flowInfo.getFlowId());
				result = transToSysParam(result,respCode);
				result.setTradeResult(UnionPaySettingUtil.transRespCode(respCode));
				result.setQueryId(consumeUndoResult.getQueryId());// 原交易流水号 调用接口输入
				// 业务需求参数 需设置 
				result.setResultMap(responseData);
			}else{
				LOGGER.info("验证签名结果[失败].");
				// 验签失败，需解决验签问题
				throw new BankAdapterException(ReturnCode.CORE_BA_RESULT_EXCEPTON_N105501, "验证签名结果[失败].");
			}
		}else{
			throw new BankAdapterException(ReturnCode.CORE_BA_RESULT_FAILRESP_N105502, "未获取到返回报文或返回http状态码非200.");
		}
		
		return result;
	}
	
	
	public  GeneralTradeResult transToSysParam(GeneralTradeResult result,String respCode){
		TrdCodeDesc codeDesc = new TrdCodeDesc();
		codeDesc.setPlatformId(TradeConstant.TRADE_CONFIG.TRADE_UNION_PAY);
		codeDesc.setRespCode(respCode);
		TrdCodeDesc getCodeDesc = trdCodeDescDao.selectBySelective(codeDesc);
		int sysCode = 0;
		String resultDesc = "";
		if(null == getCodeDesc){
			sysCode = ReturnCode.CORE_BA_UNDEFINE_N105999;
		}else{
			sysCode = DataUtil.isEmpty(getCodeDesc.getSysCode()) ? ReturnCode.CORE_BA_UNDEFINE_N105999:Integer.valueOf(getCodeDesc.getSysCode());
			resultDesc = getCodeDesc.getSysDesc();
		}
		result.setSysReturnCode(sysCode);
		result.setResultDesc(resultDesc);
		return result;
	}

	public Map<String, String> transToReqData(RefundCifParam param) {

		Map<String, String> inputParam = new HashMap<String, String>();

		inputParam.put("version", UnionPaySettingUtil.version);
		inputParam.put("encoding", UnionPaySettingUtil.encoding_UTF8);
		inputParam.put("signMethod", UnionPaySettingUtil.signMethod);
		inputParam.put("txnType", UnionPaySettingUtil.consume_undo_txnType);
		inputParam.put("txnSubType", UnionPaySettingUtil.consume_undo_txnSubType);
		inputParam.put("bizType", UnionPaySettingUtil.token_bizType);
		inputParam.put("channelType", UnionPaySettingUtil.channelType);
		String merId = UnionPaySettingUtil.getTokenMerId();
		inputParam.put("merId", merId);
		param.setMerId(merId);
		String subMerId = param.getSubMerId();//二级商户代码
        inputParam.put("subMerId", subMerId);
        AdminLcMerchant merChant = adminLcMerchantDao.selectMerchantInfos(subMerId);
        inputParam.put("subMerName", merChant.getMerchantName());//二级商户名称
        inputParam.put("subMerAbbr", merChant.getMerSiteName());//二级商户简称
        inputParam.put("accessType", UnionPaySettingUtil.accessType);//平台类商户
		inputParam.put("orderId", param.getOrderId());
		inputParam.put("txnTime", param.getTxnTime());
		inputParam.put("currencyCode", "156");
		inputParam.put("txnAmt", String.valueOf(param.getTxnAmt()));
		inputParam.put("backUrl", UnionPaySettingUtil.backUrl);
		inputParam.put("origQryId", param.getOrigOryId());

		//Map<String, String> reqData = EncryptDataUtil.sign(inputParam, UnionPaySettingUtil.encoding_UTF8);
		inputParam = UnionPaySettingUtil.signData(inputParam,merChant.getAdminCredentials());
		return inputParam;
	}

	// 记录银联交易渠道流水信息
	public TrdUnionPayFlow insertUnionPayFlow(RefundCifParam param) {

		TrdUnionPayFlow payFlow = new TrdUnionPayFlow();
		long flowId = idWork.nextId();
		payFlow.setFlowId(flowId);
		payFlow.setBusinessId(param.getBusinessId());
		payFlow.setLcId(param.getLcId());
		payFlow.setMerId(param.getMerId());
		payFlow.setSubMerId(param.getSubMerId());
		payFlow.setTxnTime(param.getTxnTime());
		payFlow.setTxnAmt(Long.valueOf(param.getTxnAmt()));
		payFlow.setOrderId(param.getOrderId());
		payFlow.setTxnType(UnionPaySettingUtil.consume_undo_txnType);
		payFlow.setTxnSubType(UnionPaySettingUtil.consume_undo_txnSubType);
		payFlow.setOrigFlowId(param.getOrigOryId());
		payFlow.setInsertTime(new Date());
		payFlow.setSyncTradeResult(UnionPaySettingUtil.TRADE_RESULT__UNKNOWN);
		unionPayFlowDao.insertSelective(payFlow);
		return payFlow;

	}

	// 请求返回后 更新银联交易渠道流水信息
	public void updateUnionPayFlow(ConsumeUndoResult result, long flowId) {

		TrdUnionPayFlow updataFlow = new TrdUnionPayFlow();
		updataFlow.setFlowId(flowId);
		String respCode = result.getRespCode();
		updataFlow.setNewFlowId(result.getQueryId());// 消费撤销交易的流水号，供后续查询使用（银联交易流水号）
		updataFlow.setSyncRespCode(respCode);
		updataFlow.setSyncRespMsg(result.getRespMsg());
		updataFlow.setSyncTradeResult(UnionPaySettingUtil.transRespCode(respCode));
		updataFlow.setLastUpdTime(new Date());
		unionPayFlowDao.updateUnionPayFlow(updataFlow);
	}


}
