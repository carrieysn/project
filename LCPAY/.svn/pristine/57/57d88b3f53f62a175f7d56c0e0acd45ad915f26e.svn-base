package com.cifpay.lc.bankadapter.universal.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;

import com.cifpay.lc.bankadapter.api.input.AbsTradeParam;
import com.cifpay.lc.bankadapter.api.output.GeneralTradeResult;
import com.cifpay.lc.bankadapter.universal.ITradeContext;
import com.cifpay.lc.bankadapter.universal.ITradeService;
import com.cifpay.lc.bankadapter.universal.ITradeStrategy;
import com.cifpay.lc.bankadapter.universal.tool.RandomTool;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.core.exception.BankAdapterException;

/**
 * 银行组件处理通用实现
 * 
 * @author linql 2016年4月15日
 *
 */
@Component
public class GeneralTradeService implements ITradeService {
	private static final Logger LOGGER = LoggerFactory.getLogger(GeneralTradeService.class);

	private final Map<String, ITradeStrategy> strategyProcessersMap = new HashMap<String, ITradeStrategy>();

	@Autowired
	public void initBankDealProcessers(List<ITradeStrategy> bankDealProcessers) {
		if (null != strategyProcessersMap) {
			for (ITradeStrategy s : bankDealProcessers) {
				strategyProcessersMap.put(s.getStrategyType(), s);
			}
		}
	}

	@Override
	public GeneralTradeResult doTrade(AbsTradeParam tradeParam) throws BankAdapterException {

		LOGGER.info("开始处理请求... 参数 >> {}", tradeParam);
		try {
			MDC.put("rid", RandomTool.generateString(6));
			ITradeStrategy tradeStrategy = this.dispath(tradeParam);

			ITradeContext context = new GeneralTradeContext(tradeStrategy);
			return context.action(tradeParam);
		} catch (BankAdapterException bae) {
			throw bae;
		} catch (Exception e) {
			LOGGER.error("**********GeneralTradeService.doTrade()处理异常！*********", e);
			throw new BankAdapterException(ReturnCode.CORE_BA_UNDEFINE_N105999, "发送银行发生异常，请查询结果后处理，以防重复交易！", e);
		}

	}

	// @Override
	// public GeneralTradeResult doTrade(AbsBusinessParam businessParam) throws
	// BankAdapterException {
	// /*
	// * //TEST: GeneralTradeResult r = new GeneralTradeResult();
	// * r.setTradeResult("0"); r.setResultDesc("交易成功!");
	// * r.setSerialNo("8431358"); r.setTradeDate("2016-04-18");
	// * r.setReturnCode("0000"); r.setReturnMsg("成功"); return r;
	// */
	// LOGGER.info("开始处理请求... 参数 >> {}", businessParam);
	// try {
	// MDC.put("rid", RandomTool.generateString(6));
	// ITradeStrategy tradeStrategy = this.dispath(businessParam);
	//
	// ITradeContext context = new GeneralTradeContext(tradeStrategy);
	// return context.action(businessParam);
	// } catch (BankAdapterException bae) {
	// throw bae;
	// } catch (Exception e) {
	// LOGGER.error("**********GeneralTradeService.doTrade()处理异常！*********", e);
	// throw new BankAdapterException(ReturnCode.CORE_BA_UNDEFINE_N105999,
	// "发送银行发生异常，请查询结果后处理，以防重复交易！", e);
	// }
	//
	// }

	private ITradeStrategy dispath(AbsTradeParam tradeParam) throws Exception {
		Assert.notNull(tradeParam, "业务参数不能为空！");
		
		String key = tradeParam.getClass().getName();
		ITradeStrategy s = strategyProcessersMap.get(key);
		if (s == null) {
			throw new BankAdapterException(ReturnCode.CORE_BA_PARAM_EXCEPTION_N105001, "未被支持的交易类型");
		}
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("选取{}处理请求！", s.getClass());
		}

		return s;
	}
}
