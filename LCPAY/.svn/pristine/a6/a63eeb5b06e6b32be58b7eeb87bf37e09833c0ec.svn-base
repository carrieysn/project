package com.cifpay.lc.core.cache.reservice;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.cifpay.lc.core.cache.pojo.MerchantCache;
import com.cifpay.lc.core.cache.reservice.api.InternalCacheService;
import com.cifpay.lc.core.db.dao.LcMerchantDao;
import com.cifpay.lc.core.db.pojo.LcMerchant;
import com.cifpay.lc.util.security.AESUtils;
import com.cifpay.lc.util.security.Constants;

@Component
public class MerchantCacheComponent implements InternalCacheService{

    protected Logger logger = LoggerFactory.getLogger(getClass());

    private static final String KEY_PREFIX = "LC_MERCHANT_";

    @Autowired
    LcMerchantDao lcMerchantDao;

    @Cacheable(value = KEY_PREFIX, key = "'Merchant_get' + #merId")
    public MerchantCache getCache(String merId) {
        LcMerchant lcMerchant = lcMerchantDao.selectByMerchantCode(merId);
        if (lcMerchant == null) {
            throw new RuntimeException("无合法商户信息");
        }
        MerchantCache merchantCache = new MerchantCache();
        merchantCache.setMerCode(merId);
        merchantCache.setMerchantName(lcMerchant.getMerchantName());
        merchantCache.setMerchantStatus(lcMerchant.getMerchantStatus());
        merchantCache.setEncryptType(lcMerchant.getEncryptType());
        merchantCache.setMerSiteDomain(lcMerchant.getMerSiteDomain());
        merchantCache.setDefPayeeBankAcct(lcMerchant.getDefPayeeBankAcct());
        merchantCache.setDefPayeeBankCode(lcMerchant.getDefPayeeBankCode());

        if (!StringUtils.isEmpty(lcMerchant.getEncryptKey())) {
            merchantCache.setEncryptKey(unpacKey(lcMerchant.getEncryptKey()));
        }
        if (!StringUtils.isEmpty(lcMerchant.getDecryptKey())) {
            merchantCache.setDecryptKey(unpacKey(lcMerchant.getDecryptKey()));
        }
        return merchantCache;
    }

    @CachePut(value = KEY_PREFIX, key = "'Merchant_get' + #merId")
    public MerchantCache updateCache(String merId) {
        LcMerchant lcMerchant = lcMerchantDao.selectByMerchantCode(merId);
        if (lcMerchant == null) {
            throw new RuntimeException("无合法商户信息");
        }
        MerchantCache merchantCache = new MerchantCache();
        merchantCache.setMerCode(merId);
        merchantCache.setMerchantStatus(lcMerchant.getMerchantStatus());
        if (!StringUtils.isEmpty(lcMerchant.getEncryptKey())) {
            merchantCache.setEncryptKey(unpacKey(lcMerchant.getEncryptKey()));
        }
        if (!StringUtils.isEmpty(lcMerchant.getDecryptKey())) {
            merchantCache.setDecryptKey(unpacKey(lcMerchant.getDecryptKey()));
        }
        merchantCache.setEncryptType(lcMerchant.getEncryptType());
        merchantCache.setMerSiteDomain(lcMerchant.getMerSiteDomain());
        return merchantCache;
    }

    @CacheEvict(value = KEY_PREFIX, key = "'Merchant_get' + #merId")
    public void removeCache(String merId) {
        if (logger.isDebugEnabled()) {
            logger.debug("删除Merchant缓存，merId:{}", merId);
        }
    }

    private String unpacKey(String secKey) throws IllegalArgumentException {
        try {
            return AESUtils.decryptStringFromBase64(secKey, Constants.AES_PWD_FOR_PROTECT_KEY);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("提取商户密钥异常");
        }
    }

	@Override
	public String getCacheKey() {
		// TODO Auto-generated method stub
		return KEY_PREFIX;
	}
}
