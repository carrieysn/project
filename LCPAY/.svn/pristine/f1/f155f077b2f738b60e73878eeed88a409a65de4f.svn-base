package com.cifpay.lc.std.paychannel.impl;

import com.alibaba.fastjson.JSON;
import com.cifpay.lc.bankadapter.api.helper.GetTradeParamHelper;
import com.cifpay.lc.bankadapter.api.input.unionpay.ExpiryCifParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.OpenCifParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.PayCifParam;
import com.cifpay.lc.constant.enums.PayMethod;
import com.cifpay.lc.constant.enums.PayHandler;
import com.cifpay.lc.core.db.dao.UnionUserAccountDao;
import com.cifpay.lc.core.db.pojo.*;
import com.cifpay.lc.core.uid.UnionUserAccountIdWorker;
import com.cifpay.lc.domain.enums.AdminCardType;
import com.cifpay.lc.domain.lc.OpenLcUnionCreditInputBean;
import com.cifpay.lc.domain.lc.TransferInputBean;
import com.cifpay.lc.std.domain.kernel.InvalidateLcKernelInputBean;
import com.cifpay.lc.std.domain.paychannel.ExpiryInputBean;
import com.cifpay.lc.std.domain.paychannel.FreezeInputBean;
import com.cifpay.lc.std.domain.paychannel.ReqReservedBean;
import com.cifpay.lc.std.domain.paychannel.UnfreezeInputBean;
import com.cifpay.lc.util.security.ThreeDESUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * 银联信用卡支付
 */
@Component
public class UnionCreditImpl extends UnionBase<OpenLcUnionCreditInputBean> {

    protected Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private UnionUserAccountDao userAccountDao;

    @Autowired
    private UnionUserAccountIdWorker unionUserAccountIdWorker;

    private final static String CREDIT = "30";// 信用卡

    @Override
    public PayMethod getOpenLcChannel() {
        return PayMethod.UNION_CREDIT;
    }

    @Override
    protected int getCardType() {
        return AdminCardType.CREDIT.getCode();
    }

    @Override
    protected String getType() {
        return CREDIT;
    }

    @Override
    protected void saveUserUnionInfo(OpenLcUnionCreditInputBean creditInputBean, FreezeInputBean freezeInputBean) {

        PreLc preLc = freezeInputBean.getPreLc();

        if (null == userAccountDao.selectById(creditInputBean.getMerId(), preLc.getMerUserId(),
                AdminCardType.CREDIT.getCode())) {

            String encryptAccNo = null;
            try {
                encryptAccNo = ThreeDESUtil.desEncryption(creditInputBean.getAccNo());
            } catch (Exception e) {
                e.printStackTrace();
            }
            UnionUserAccount unionUserAccount = new UnionUserAccount();
            unionUserAccount.setpId(unionUserAccountIdWorker.nextId());
            unionUserAccount.setMid(creditInputBean.getMerId());
            unionUserAccount.setMerUserid(preLc.getMerUserId());
            unionUserAccount.setPayerAccno(encryptAccNo);
            unionUserAccount.setUserMobile(creditInputBean.getPhoneNo());
            unionUserAccount.setAccnoType(AdminCardType.CREDIT.getCode());
            unionUserAccount.setCreateDate(new Date());
            userAccountDao.insert(unionUserAccount);
        }
    }

    @Override
    protected OpenCifParam createOpenCifParam(OpenLcUnionCreditInputBean creditInputBean,
                                              FreezeInputBean freezeInputBean,
                                              String subMerId) throws Exception {

        PreLc preLc = freezeInputBean.getPreLc();

        LcOpen lcOpen = freezeInputBean.getLcOpen();

        GetTradeParamHelper helper = GetTradeParamHelper.getInstance(GetTradeParamHelper.UNION_PAY);

        OpenCifParam param = helper.getTradeParam(OpenCifParam.class, preLc.getLcType(), CREDIT);

        param.setLcId(preLc.getLcId());
        param.setUserId(preLc.getMerUserId());
        param.setSubMerId(subMerId); // DONE:查询银联二级商户Id
        param.setOrderId(lcOpen.getLcOpenId().toString()); // LC_OPEN_ID
        param.setOrderDesc(preLc.getOrderContent());
        param.setTxnTime(new SimpleDateFormat("yyyyMMddhhmmss").format(new Date()));
        param.setTxnAmt(preLc.getLcAmount().longValue());
        param.setChannelType("07");
        param.setAccNo(creditInputBean.getAccNo());
        param.setCvn2(creditInputBean.getCvn2());
        param.setExpired(new SimpleDateFormat("yyMM").format(creditInputBean.getExpired()));
        param.setPhoneNo(creditInputBean.getPhoneNo());
        param.setCertifTp(creditInputBean.getCertifTp());
        param.setCertifId(creditInputBean.getCertifId());
        param.setCustomerNm(creditInputBean.getCustomerNm());
        param.setReqReserved(JSON.toJSONString(new ReqReservedBean(PayHandler.FREEZE)));

        return param;
    }

    @Override
    protected PayCifParam createTransferCifParam(TransferInputBean inputBean, UnfreezeInputBean unfreezeInputBean)
            throws Exception {

        Lc lc = unfreezeInputBean.getLc();
        LcOpen lcOpen = unfreezeInputBean.getLcOpen();
        LcPay lcPay = unfreezeInputBean.getLcPay();

        PayCifParam payCifParam = GetTradeParamHelper.getInstance(GetTradeParamHelper.UNION_PAY).getTradeParam(PayCifParam.class, lc.getLcType(), CREDIT);
        payCifParam.setLcId(inputBean.getLcId());
        payCifParam.setChannelType("07");
        payCifParam.setOrigOryId(lcOpen.getUnionSerialNo());
        payCifParam.setOrderId(lcPay.getLcPayId().toString());    // lcPayId 银联要求每次请求orderId必须不同
        payCifParam.setTxnTime(lcOpen.getUnionTxntime());
        payCifParam.setTxnAmt(lcOpen.getLcAmount().longValue());

        return payCifParam;
    }

    @Override
    protected ExpiryCifParam createExpiryCifParam(InvalidateLcKernelInputBean invalidateLcInputBean, ExpiryInputBean expiryInputBean) throws Exception {
        Lc lc = expiryInputBean.getLc();
        LcOpen lcOpen = expiryInputBean.getLcOpen();
        LcInvalid lcInvalid = expiryInputBean.getLcInvalid();

        GetTradeParamHelper helper = GetTradeParamHelper.getInstance(GetTradeParamHelper.UNION_PAY);
        ExpiryCifParam expiryCifParam = helper.getTradeParam(ExpiryCifParam.class, lc.getLcType(), CREDIT);

        expiryCifParam.setLcId(invalidateLcInputBean.getLcId());
        expiryCifParam.setChannelType("07");
        expiryCifParam.setOrderId(lcInvalid.getLcInvalidId().toString());
        expiryCifParam.setOrigOryId(lcOpen.getUnionSerialNo());
        expiryCifParam.setTxnTime(lcOpen.getUnionTxntime());
        expiryCifParam.setTxnAmt(lcOpen.getLcAmount().longValue());

        return expiryCifParam;
    }

    @Override
    protected boolean validataMobile(FreezeInputBean freezeInputBean, String merId, String phoneNo) {
        return true;
    }
}
