package com.cifpay.lc.bankadapter.unionpay.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.cifpay.lc.bankadapter.api.IBankTradeService;
import com.cifpay.lc.bankadapter.api.constant.TradeConstant;
import com.cifpay.lc.bankadapter.api.input.AbsTradeParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.BackRcvResponseCifParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.ExpiryCifParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.QueryTradeCifParam;
import com.cifpay.lc.bankadapter.api.output.GeneralTradeResult;
import com.cifpay.lc.bankadapter.unionpay.util.AcpService;
import com.cifpay.lc.bankadapter.unionpay.util.DataUtil;
import com.cifpay.lc.bankadapter.unionpay.util.LogUtil;
import com.cifpay.lc.bankadapter.unionpay.util.UnionPaySettingUtil;
import com.cifpay.lc.bankadapter.universal.IBankDeal;
import com.cifpay.lc.bankadapter.universal.service.UnionPayTrdBusinessService;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.core.db.dao.LcTrdUnionPayFlowDao;
import com.cifpay.lc.core.db.dao.TrdCodeDescDao;
import com.cifpay.lc.core.db.pojo.TrdCodeDesc;
import com.cifpay.lc.core.db.pojo.TrdUnionPayFlow;
import com.cifpay.lc.core.db.pojo.UnionPayTrdMain;
import com.cifpay.lc.core.exception.BankAdapterException;
import com.cifpay.lc.core.uid.UnionPayOrderIdWorker;

/**
 * 
 * @author Administrator 如果返回结果为null或者异常，应用层不用处理
 */
@Component
public class BackRcvResponseDeal implements IBankDeal {
	private static Logger LOGGER = LoggerFactory.getLogger(BackRcvResponseDeal.class);
	@Autowired
	private UnionPayTrdBusinessService businessService;
	@Autowired
	IBankTradeService tradeService;
	@Autowired
	private UnionPayOrderIdWorker orderIdWorker;
	@Autowired
	private TrdCodeDescDao trdCodeDescDao;

	@Autowired
	private LcTrdUnionPayFlowDao unionPayFlowDao;

	public GeneralTradeResult bankDeal(AbsTradeParam tradeParam) throws Exception {
		BackRcvResponseCifParam params = (BackRcvResponseCifParam) tradeParam;
		String encoding = params.getEncoding();
		HashMap<String, String> reqParam = params.getReqParam();
		LOGGER.info("BackRcvResponse接收后台通知开始");
		LogUtil.printRequestLog(reqParam);

		Map<String, String> valideData = null;
		if (null != reqParam && !reqParam.isEmpty()) {
			Iterator<Entry<String, String>> it = reqParam.entrySet().iterator();
			valideData = new HashMap<String, String>(reqParam.size());
			while (it.hasNext()) {
				Entry<String, String> e = it.next();
				String key = (String) e.getKey();
				String value = (String) e.getValue();
				value = new String(value.getBytes(encoding), encoding);
				valideData.put(key, value);
			}
		}

		// 重要！验证签名前不要修改reqParam中的键值对的内容，否则会验签不过
		if (!AcpService.validate(valideData, encoding)) {
			LOGGER.info("验证签名结果[失败].");
			// 验签失败，需解决验签问题
			throw new BankAdapterException(ReturnCode.CORE_BA_RESULT_EXCEPTON_N105501, "验证签名结果[失败].");
		} else {
			LOGGER.info("验证签名结果[成功].");

			// 交易成功，更新商户订单状态
			String orderId = valideData.get("orderId");
			String txnTime = valideData.get("txnTime");
			String txnType = valideData.get("txnType");
			String txnSubType = valideData.get("txnSubType");
			String bizType = valideData.get("bizType");
			String asynRespCode = valideData.get("respCode");
			String asynRespMsg = valideData.get("respMsg");
			String traceNo = valideData.get("traceNo");
			String traceTime = valideData.get("traceTime");
			String settleAmt = valideData.get("settleAmt");
			String settleCurrencyCode = valideData.get("settleCurrencyCode");
			String settleDate = valideData.get("settleDate");
			String queryId = valideData.get("queryId"); // 根据查询ID、订单ID更新处理
			String reqReserved = valideData.get("reqReserved");

			// TODO 将返回码与系统码进行转换
			String asynTradeResult = UnionPaySettingUtil.transRespCode(asynRespCode);

			// TODO 更新流水表
			TrdUnionPayFlow updataFlow = new TrdUnionPayFlow();
			updataFlow.setNewFlowId(queryId);
			updataFlow.setOrderId(orderId);
			updataFlow.setTxnTime(txnTime);
			updataFlow.setAsynRespCode(asynRespCode);
			updataFlow.setAsynRespMsg(asynRespMsg);
			updataFlow.setAsynTradeResult(asynTradeResult);
			updataFlow.setTraceNo(traceNo);
			updataFlow.setTraceTime(traceTime);
			updataFlow.setSettleAmt(Long.valueOf(settleAmt));
			updataFlow.setSettleCurrencyCode(settleCurrencyCode);
			updataFlow.setSettleDate(settleDate);
			updataFlow.setLastUpdTime(new Date());
			unionPayFlowDao.updateUnionPayFlowAsyn(updataFlow);

			// 发送交易状态查询
			QueryTradeCifParam queryParam = new QueryTradeCifParam();

			if (UnionPaySettingUtil.consume_bizType.equals(bizType)) {
				queryParam.setTxnId(TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_DINGGOU_QUERY);
			} else if (UnionPaySettingUtil.token_bizType.equals(bizType)) {
				queryParam.setTxnId(TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_WU_QUERY);
			}
			UnionPayTrdMain tmp = businessService.selectByTxnKey(orderId, txnTime);
			queryParam.setLcId(tmp.getLcId());
			queryParam.setTxnType("00");
			queryParam.setTxnSubType("00");
			queryParam.setOrderId(orderId);
			queryParam.setTxnTime(txnTime);
			queryParam.setSubMerId(tmp.getSubMerId());
			queryParam.setBusinessId(tmp.getBusinessId());
			queryParam.setOnline(true);
			GeneralTradeResult result = tradeService.doTrade(queryParam);// 返回查询结果
			if ("32".equals(txnType) && "00".equals(txnSubType)) {
				if (!StringUtils.isEmpty(reqReserved) && reqReserved.contains("#sysReturnCode=")) {
					LOGGER.info("预授权完成撤销触发的预授权撤销，特殊处理 - 返回预授权完成撤销的相关结果");
					// 预授权完成撤销触发的预授权撤销，特殊处理
					result = new GeneralTradeResult();
					String[] str = reqReserved.split("#");
					String _queryId = str[0].split("=")[1];
					String _orderId = str[1].split("=")[1];
					String _reqReserved = str[2].split("=")[1];
					String _tradeResult = str[3].split("=")[1];
					String _sysReturnCode = str[4].split("=")[1];
					String _resultDesc = str[5].split("=")[1];
					result.setQueryId(_queryId);
					result.setTradeResult(_tradeResult);
					result.setSysReturnCode(Integer.valueOf(_sysReturnCode));
					result.setResultDesc(_resultDesc);
					HashMap<String, String> map = new HashMap<String, String>();
					map.put("orderId", _orderId);
					map.put("reqReserved", _reqReserved);
					result.setResultMap(map);
					return result;
				}
			}

			if ("33".equals(txnType) && "00".equals(txnSubType)) {
				// 预授权完成撤销类型的，需要再发起预授权撤销
				try {
					if (!TradeConstant.TRADE_CONFIG.TRADE_RESULT_SUCCEED_0.equals(asynTradeResult)) {
						// 预授权完成撤销失败
						LOGGER.info("预授权完成撤销失败.");
						return result;
					} else {
						// 直接返回部分成功；
						result.setTradeResult("3");
					}
					// 查询原交易
					ExpiryCifParam tmpExpiry = new ExpiryCifParam();
					tmpExpiry.setLcId(tmp.getLcId());
					if (UnionPaySettingUtil.consume_bizType.equals(bizType)) {
						tmpExpiry.setTxnId(TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_DINGGOU_AUTH);
					} else if (UnionPaySettingUtil.token_bizType.equals(bizType)) {
						tmpExpiry.setTxnId(TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_WU_AUTH);
					}
					UnionPayTrdMain authTm = businessService.selectBySelective(tmpExpiry);
					if (authTm == null) {
						LOGGER.error("####BackRcvResponseDeal处理错误####：{}", "原预授权记录为空!");
						return result;
					}
					// 发起预授权撤销
					ExpiryCifParam param = new ExpiryCifParam();
					if (TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_DINGGOU_AUTH_FINISH_UNDO.equals(tmp.getTxnId())) {
						// 定购预授权
						param.setTxnId(TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_DINGGOU_AUTH_UNDO);
					} else {
						param.setTxnId(TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_WU_AUTH_UNDO);
					}
					param.setTxnType("32");
					param.setTxnSubType("00");
					param.setLcId(authTm.getLcId());
					param.setChannelType(authTm.getChannelType());
					param.setTxnAmt(authTm.getTxnAmt());
					param.setCurrencyCode(authTm.getCurrencyCode());
					param.setBizType(authTm.getBizType());
					param.setSubMerId(authTm.getSubMerId());
					param.setMerId(authTm.getMerId());
					String time = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
					param.setOrderId(String.valueOf(orderIdWorker.nextId()));
					param.setTxnTime(time);
					param.setOrigOryId(authTm.getRtnQueryId());
					reqReserved = StringUtils.isEmpty(reqReserved) ? "" : reqReserved;
					param.setReqReserved("queryId=" + queryId + "#orderId=" + orderId + "#reqReserved=" + reqReserved
							+ "#tradeResult" + result.getTradeResult() + "#sysReturnCode=" + result.getSysReturnCode()
							+ "#resultDesc=" + result.getResultDesc());// 完成撤销相关信息

					tradeService.doTrade(param);

				} catch (Exception e) {
					LOGGER.error("####BackRcvResponseDeal处理错误####：{}", e.getMessage());
					e.printStackTrace();
					// 如果异常，返回部分成功
					result.setTradeResult("3");
				}
			}

			return result;
		}
	}

	public GeneralTradeResult transToSysParam(GeneralTradeResult result, String respCode) {
		TrdCodeDesc codeDesc = new TrdCodeDesc();
		codeDesc.setPlatformId(TradeConstant.TRADE_CONFIG.TRADE_UNION_PAY);
		codeDesc.setRespCode(respCode);
		TrdCodeDesc getCodeDesc = trdCodeDescDao.selectBySelective(codeDesc);
		int sysCode = 0;
		String resultDesc = "";
		if (null == getCodeDesc) {
			sysCode = ReturnCode.CORE_BA_UNDEFINE_N105999;
		} else {
			sysCode = DataUtil.isEmpty(getCodeDesc.getSysCode()) ? ReturnCode.CORE_BA_UNDEFINE_N105999
					: Integer.valueOf(getCodeDesc.getSysCode());
			resultDesc = getCodeDesc.getSysDesc();
		}
		result.setSysReturnCode(sysCode);
		result.setResultDesc(resultDesc);
		return result;
	}

	@Override
	public String getBankCode() {
		// TODO Auto-generated method stub
		return TradeConstant.TRADE_CONFIG.TRADE_UNION_PAY + TradeConstant.TRADE_CONFIG.TRADE_UNIONPAY_BACK_RCV_RESPONSE;
	}
}
