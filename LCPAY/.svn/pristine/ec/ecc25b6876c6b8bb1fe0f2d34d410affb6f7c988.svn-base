package com.cifpay.lc.core.autoconfigure.lock;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.recipes.locks.InterProcessMutex;
import org.apache.zookeeper.data.Stat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConditionalOnBean(CuratorConfiguration.class)
public class DistributeLockManager {
	
	protected Logger logger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	public CuratorFramework client;
	
	public DisLock getDisLock(String lockPath) {
		try {
			Stat stat = client.checkExists().forPath(lockPath);
			if(stat == null){
				client.create().creatingParentsIfNeeded().forPath(lockPath);
			}
		} catch (Exception e) {
			logger.error("创建分布式锁异常",e);
		}
		
		InterProcessMutex lock = new InterProcessMutex(client,lockPath);
		DisLock disLock = new DisLock(lock,lockPath);
		return disLock;
	}
	
	public void unlock(DisLock disLock) {
		if(disLock == null) return;
		try {
			if(disLock.getLock() != null){
				disLock.getLock().release();
			}
			deleteLockPath(disLock.getLockPath());
		} catch (Exception e) {
			logger.error("释放分布式锁异常",e);
		}
	}
	
	public void deleteLockPath(String lockPath){
		try {
			Stat stat = client.checkExists().forPath(lockPath);
			if(stat != null && 
					client.getChildren().forPath(lockPath).isEmpty()){
				client.delete().forPath(lockPath);
			}
		} catch (Exception e) {
			logger.error("删除路经异常",e);
		}
	}
	
}
