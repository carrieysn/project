package com.cifpay.lc.std.business.merchant.lc;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cifpay.lc.api.BusinessOutput;
import com.cifpay.lc.api.gateway.lc.RefundLcService;
import com.cifpay.lc.constant.BizConstants.LcTranCode;
import com.cifpay.lc.constant.ReturnCode;
import com.cifpay.lc.constant.enums.LcStatusType;
import com.cifpay.lc.constant.enums.ProcessStatus;
import com.cifpay.lc.core.cache.pojo.LcCache;
import com.cifpay.lc.core.cache.pojo.LcProductCache;
import com.cifpay.lc.core.cache.service.LcCacheServant;
import com.cifpay.lc.core.common.CoreBusinessContext;
import com.cifpay.lc.core.common.CoreBusinessInterceptorConfig;
import com.cifpay.lc.core.common.CoreBusinessTranCode;
import com.cifpay.lc.core.db.dao.LcRefundDao;
import com.cifpay.lc.core.db.pojo.Lc;
import com.cifpay.lc.core.db.pojo.LcRefund;
import com.cifpay.lc.core.exception.CoreBusinessException;
import com.cifpay.lc.core.exception.CoreValidationRejectException;
import com.cifpay.lc.core.uid.LcRefundWorker;
import com.cifpay.lc.domain.lc.RefundLcInputBean;
import com.cifpay.lc.domain.lc.RefundLcOutputBean;
import com.cifpay.lc.std.interceptor.BusinessLockInterceptor;
import com.cifpay.lc.std.interceptor.BusinessLoggingInterceptor;

/**
 * 交易成功的银信证，退款
 *
 * @author sweet
 */
@Service("refundLcService")
@CoreBusinessInterceptorConfig({ BusinessLoggingInterceptor.class, BusinessLockInterceptor.class })
@CoreBusinessTranCode(LcTranCode.REFUND)
public class RefundLcServiceImpl extends LcProductServiceImplBase<RefundLcInputBean, RefundLcOutputBean>
        implements RefundLcService {

    @Autowired
    private LcRefundDao lcRefundDao;

    @Autowired
    private LcCacheServant lcCacheServant;

    @Autowired
    private LcRefundWorker lcRefundWorker;

    @Override
    protected void validateInputParameters(RefundLcInputBean inputBean) throws CoreValidationRejectException {
        // TODO Auto-generated method stub
        if (inputBean.getRefundAmount() == null || inputBean.getRefundAmount().longValue() <= 0) {
            throw new CoreValidationRejectException(ReturnCode.UNKNOWN_ERROR, "退款金额错误");
        }
    }

    @Override
    protected void validateLc(RefundLcInputBean inputBean, Lc lc) throws CoreValidationRejectException {
        if (lc == null) {
            throw new CoreValidationRejectException(ReturnCode.CORE_STD_LC_NOT_EXISTS, "银信证记录不存在");
        }
        if (lc.getLcStatus() != null && LcStatusType.RETREAT.getStatusCode().compareTo(lc.getLcStatus()) == 0) {
            throw new CoreValidationRejectException(ReturnCode.CORE_STD_LC_INVALID, "银信证已失效");
        }
        if (lc.getLcStatus().compareTo(LcStatusType.SUCCESS.getStatusCode()) != 0) {
            throw new CoreValidationRejectException(ReturnCode.CORE_STD_LC_STATUS_CHECK_UNPASSED_RECV, "银信证未完成");
        }

    }

    @Override
    protected void validateLcProductRule(RefundLcInputBean inputBean, LcProductCache lcProduct, CoreBusinessContext context)
            throws CoreValidationRejectException {
        // TODO Auto-generated method stub

    }

    @Override
    public BusinessOutput<RefundLcOutputBean> processBusiness(RefundLcInputBean inputBean, CoreBusinessContext context)
            throws CoreBusinessException {
        logger.info("进入退款：" + inputBean.getLcId());

        Date now = new Date();

        LcCache lc = lcCacheServant.selectByPrimaryKey(inputBean.getLcId());

        if (lc == null) {
            return BusinessOutput.fail(ReturnCode.UNKNOWN_ERROR, "未找到银信证记录");
        }

        List<LcRefund> refundList = lcRefundDao.selectByLcId(inputBean.getLcId());

        BigDecimal refundAmount = BigDecimal.ZERO;

        if (refundList != null && !refundList.isEmpty()) {
            for (LcRefund refund : refundList) {
                refundAmount.add(refund.getRefundAmount());
            }
        }

        BigDecimal amount = refundAmount.add(inputBean.getRefundAmount());

        if (amount.compareTo(lc.getLcAmount()) > 0) {
            return BusinessOutput.fail(ReturnCode.UNKNOWN_ERROR, "退款金额不正确");
        }

        LcRefund lcRefund = new LcRefund();
        lcRefund.setLcId(inputBean.getLcId());
        lcRefund.setLcRefundId(lcRefundWorker.nextId());
        lcRefund.setMid(inputBean.getMerId());
        lcRefund.setOrderId(lc.getOrderId());
        lcRefund.setRefundOrderId(inputBean.getRefundOrderId());
        lcRefund.setRefundAmount(lc.getLcAmount());
        lcRefund.setRefundDate(now);
        lcRefund.setRefundStatus(ProcessStatus.INPROCESS.getCode());
        int insertRows = lcRefundDao.insert(lcRefund);

        if (insertRows > 0) {
            LcStatusType lcStatus = LcStatusType.REFUND;

            Lc updateLc = new Lc();
            updateLc.setLcId(lc.getLcId());
            updateLc.setLcStatus(lcStatus.getStatusCode());
            lcCacheServant.updateByPrimaryKeySelective(updateLc);

            RefundLcOutputBean outputBean = new RefundLcOutputBean();
            outputBean.setLcId(lc.getLcId());
            outputBean.setLcStatus(lcStatus.getStatusCode());
            outputBean.setLcStatusDesc(LcStatusType.getDesc(lcStatus.getStatusCode()));

            return BusinessOutput.success(outputBean);
        }

        return BusinessOutput.fail(ReturnCode.UNKNOWN_ERROR, "退款失败");
    }

}
