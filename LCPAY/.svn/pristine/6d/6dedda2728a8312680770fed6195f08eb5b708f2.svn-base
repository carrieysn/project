package com.cifpay.lc.versionb;

import java.util.Map;

import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

//import com.cifpay.lc.core.cache.pojo.MerchantCache;
//import com.cifpay.lc.core.cache.service.MerchantCacheServant;
import com.cifpay.lc.gateway.common.exception.GatewayValidationRejectException;

@Component
public class VersionBMerchantSignValidator {

//	@Autowired
//	private MerchantCacheServant merchantCacheServant;

    /**
     * 校验商户请求的签名是否正确，若不正确，则抛出CPBussinessException
     *
     * @param merId
     * @param reqParams
     * @param inputSign
     * @throws GatewayValidationRejectException
     * @see com.cifpay.lc.constant.ReturnCode
     */
    public void checkMerSignature(String merId, Map<String, String> reqParams, String inputSign)
            throws GatewayValidationRejectException {
//		MerchantCache merchantCache = merchantCacheServant.getMerchantSummary(merId);
//		//MerchantSummary ms = merSummaryCache.getMerchantSummary(merId);
//		if (null == merchantCache || !merchantCache.isExists() || null == merchantCache.getDecryptKey()) {
//			throw new GatewayValidationRejectException(ReturnCode.GW_MER_ID_NOT_EXISTS, "商户ID未登记");
//		}
//
//		String signKey = merchantCache.unpackDecryptKey();
//		String correctSign = LcMd5SignTool.signMap(reqParams, signKey).toUpperCase();
//		if (null == inputSign || !correctSign.equals(inputSign.toUpperCase())) {
//			throw new GatewayValidationRejectException(ReturnCode.GW_MER_REQUEST_SIGN_INVALID, "商户签名不正确");
//		}
    }

    /**
     * 对准备响应或发送给商户的数据进行签名，并将签名结果作为key为"sign"的参数添加进responseParams中。
     *
     * @param merId
     * @param responseParams
     * @return
     */
    public void addSign(String merId, Map<String, String> responseParams) {
        if (StringUtils.hasText(responseParams.get("sign"))) {
            // 避免重复签名
            return;
        }
        String sign = "";
//		if (null != merId && merId.length() > 0) {
//			MerchantCache merchantCache = merchantCacheServant.getMerchantSummary(merId);
//			if (null == merchantCache || !merchantCache.isExists() || null == merchantCache.getEncryptKey()) {
//				String apiKey = merchantCache.unpackEncryptKey();
//				sign = LcMd5SignTool.signMap(responseParams, apiKey);
//			}
//		}
        responseParams.put("sign", sign);
    }

}
