package com.cifpay.lc.core.autoconfigure.lock;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.recipes.locks.InterProcessMutex;
import org.apache.zookeeper.data.Stat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

@Configuration
@ConditionalOnProperty(name="cifpay.lock.enable", havingValue="true")
public class DistributeLockManager {
	
	protected Logger logger = LoggerFactory.getLogger(getClass());

	ThreadLocal<InterProcessMutex> lockPool = new ThreadLocal<InterProcessMutex>();
	
	@Autowired
	public CuratorFramework client;
	
	public InterProcessMutex getlock(String lockPath) {
		//String lockPath = getLockPath(key);
		try {
			Stat stat = client.checkExists().forPath(lockPath);
			if(stat == null){
				client.create().creatingParentsIfNeeded().forPath(lockPath);
			}
		} catch (Exception e) {
			logger.error("创建分布式锁异常",e);
		}
		
		InterProcessMutex lock = new InterProcessMutex(client,lockPath);
		return lock;
	}
	
	public InterProcessMutex getlock(String lockPath,boolean cache) {
		//String lockPath = getLockPath(key);
		try {
			Stat stat = client.checkExists().forPath(lockPath);
			if(stat == null){
				client.create().creatingParentsIfNeeded().forPath(lockPath);
			}
		} catch (Exception e) {
			logger.error("创建分布式锁异常",e);
		}
		
		InterProcessMutex lock = new InterProcessMutex(client,lockPath);
		if(lock != null && cache){
			lockPool.set(lock);
		}
		return lock;
	}
	
	public void unlock(String lockPath) {
		try {
			InterProcessMutex lock = lockPool.get();
			if(lock != null){
				lock.release();
				deleteLockPath(lockPath);
				lockPool.remove();
			}
		} catch (Exception e) {
			logger.error("释放分布式锁异常",e);
		}
	}
	
	public void unlock(InterProcessMutex lock,String lockPath) {
		try {
			if(lock != null){
				lock.release();
				deleteLockPath(lockPath);
			}
		} catch (Exception e) {
			logger.error("释放分布式锁异常",e);
		}
	}
	
	public void deleteLockPath(String lockPath){
		try {
			if(!client.getChildren().forPath(lockPath).isEmpty()){
				client.delete().forPath(lockPath);
			}
		} catch (Exception e) {
			logger.error("删除路经异常",e);
		}
	}
	
}
