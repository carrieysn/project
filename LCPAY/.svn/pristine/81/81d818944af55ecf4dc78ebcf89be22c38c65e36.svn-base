package com.cifpay.lc.std.paychannel.impl;

import com.alibaba.fastjson.JSON;
import com.cifpay.lc.bankadapter.api.IBankTradeService;
import com.cifpay.lc.bankadapter.api.constant.TradeConfig;
import com.cifpay.lc.bankadapter.api.input.unionpay.ExpiryCifParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.PayCifParam;
import com.cifpay.lc.bankadapter.api.input.unionpay.RefundCifParam;
import com.cifpay.lc.bankadapter.api.output.GeneralTradeResult;
import com.cifpay.lc.constant.enums.LcTranStatus;
import com.cifpay.lc.constant.enums.LcTypeEnum;
import com.cifpay.lc.constant.enums.PayHandler;
import com.cifpay.lc.core.db.dao.AdminLcMerCreDao;
import com.cifpay.lc.core.db.pojo.AdminLcMerCre;
import com.cifpay.lc.core.db.pojo.Lc;
import com.cifpay.lc.domain.lc.RefundLcInputBean;
import com.cifpay.lc.domain.lc.TransferInputBean;
import com.cifpay.lc.domain.lc.TransferOutputBean;
import com.cifpay.lc.domain.message.union.CreditParam;
import com.cifpay.lc.std.domain.kernel.InvalidateLcKernelInputBean;
import com.cifpay.lc.std.domain.kernel.InvalidateLcKernelOutputBean;
import com.cifpay.lc.std.domain.kernel.RefundKernalInputBean;
import com.cifpay.lc.std.domain.kernel.RefundKernalOutputBean;
import com.cifpay.lc.std.domain.paychannel.*;
import com.cifpay.lc.std.mapper.LcTranStatusMapper;
import com.cifpay.lc.std.paychannel.ExpiryInterface;
import com.cifpay.lc.std.paychannel.RefundInterface;
import com.cifpay.lc.std.paychannel.TransferInterface;
import com.cifpay.lc.std.util.BeanFactory;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

public abstract class UnionBase
        implements
        TransferInterface<TransferInputBean, TransferOutputBean>,
        ExpiryInterface<InvalidateLcKernelInputBean, InvalidateLcKernelOutputBean>,
        RefundInterface<RefundLcInputBean, RefundKernalOutputBean<CreditParam>> {

    public static final String TXN_TIME_FORMAT = "yyyyMMddHHmmss";

    protected static final String DEBIT = "10"; // 储蓄卡
    protected final static String CREDIT = "30";// 信用卡

    @Autowired
    private AdminLcMerCreDao adminLcMerCreDao;

    @Autowired
    private IBankTradeService bankTradeService;

    @Override
    public UnfreezeOutputBean<CreditParam> unfreeze(TransferInputBean inputBean, UnfreezeInputBean unfreezeInputBean) {

        Lc lc = unfreezeInputBean.getLc();

        // CP200不需要发起交易，只把数据库数据补全
        if (LcTypeEnum.CP200.getCode().equalsIgnoreCase(lc.getLcType())) {
            return BeanFactory.getSucUnfreezeOutputBean();
        }

        try {

            //
            AdminLcMerCre adminLcMerCre = queryAdminLcMerCreList(inputBean.getMerId());
            ReqReservedBean reqReservedBean = new ReqReservedBean();
            reqReservedBean.setPayHandler(PayHandler.UNFREEZE);
            reqReservedBean.setPayMethod(getOpenLcChannel());

            PayCifParam payCifParam = createTransferCifParam(inputBean, unfreezeInputBean);

            payCifParam.setSubMerId(adminLcMerCre.getXnMerId());
            payCifParam.setReqReserved(JSON.toJSONString(reqReservedBean));

            GeneralTradeResult response = bankTradeService.doTrade(payCifParam);
            LcTranStatus tranStatus = LcTranStatusMapper.parseUnionResult(response.getTradeResult());

            UnfreezeOutputBean<CreditParam> outputBean = null;

            if (TradeConfig.TRADE_RESULT_SUCCEED_0.equalsIgnoreCase(response.getTradeResult())) {

                outputBean = BeanFactory.getSucUnfreezeOutputBean();

                // 银连受理成功，还未真实解冻
                tranStatus = LcTranStatus.UNCERTAIN;

            } else {
                outputBean = BeanFactory.getFailUnfreezeOutputBean(response.getResultDesc());
            }

            // 返回结果
            outputBean.setSerialNo(response.getQueryId());
            outputBean.setMessage(response.getResultDesc());
            outputBean.setLcTranStatus(tranStatus);

            CreditParam creditParam = new CreditParam();
            creditParam.setTxnTime(payCifParam.getTxnTime());
            creditParam.setTradeResult(response.getTradeResult());
            creditParam.setResultDesc(response.getResultDesc());
            outputBean.setData(creditParam);

            return outputBean;

        } catch (Throwable e) {
            return BeanFactory.getFailUnfreezeOutputBean(e.getMessage());
        }
    }

    @Override
    public ExpiryOutputBean<CreditParam> expiry(InvalidateLcKernelInputBean inputBean, ExpiryInputBean expiryInputBean) {

        try {

            //
            AdminLcMerCre adminLcMerCre = queryAdminLcMerCreList(inputBean.getMerId());
            ReqReservedBean reqReservedBean = new ReqReservedBean();
            reqReservedBean.setPayHandler(PayHandler.Expiry);
            reqReservedBean.setPayMethod(getOpenLcChannel());

            ExpiryCifParam expiryCifParam = createExpiryCifParam(inputBean, expiryInputBean);

            expiryCifParam.setSubMerId(adminLcMerCre.getXnMerId());
            expiryCifParam.setReqReserved(JSON.toJSONString(reqReservedBean));

            GeneralTradeResult response = bankTradeService.doTrade(expiryCifParam);

            LcTranStatus tranStatus = LcTranStatusMapper.parseUnionResult(response.getTradeResult());

            ExpiryOutputBean<CreditParam> outputBean = null;

            if (TradeConfig.TRADE_RESULT_SUCCEED_0.equalsIgnoreCase(response.getTradeResult())) {

                outputBean = BeanFactory.getSucExpiryOutputBean();

                // 银连受理成功，还未真实解冻
                tranStatus = LcTranStatus.UNCERTAIN;

            } else {
                outputBean = BeanFactory.getFailExpiryOutputBean(response.getResultDesc());
            }

            // 返回结果
            outputBean.setSerialNo(response.getQueryId());
            outputBean.setMessage(response.getResultDesc());
            outputBean.setLcTranStatus(tranStatus);

            CreditParam creditParam = new CreditParam();
            creditParam.setTradeResult(response.getTradeResult());
            creditParam.setResultDesc(response.getResultDesc());
            outputBean.setData(creditParam);

            return outputBean;

        } catch (Throwable e) {
            return BeanFactory.getFailExpiryOutputBean(e.getMessage());
        }
    }

    @Override
    public RefundKernalOutputBean<CreditParam> refund(RefundLcInputBean input, RefundKernalInputBean input2) {

        try {

            //
            AdminLcMerCre adminLcMerCre = queryAdminLcMerCreList(input.getMerId());
            ReqReservedBean reqReservedBean = new ReqReservedBean();
            reqReservedBean.setPayHandler(PayHandler.Refund);
            reqReservedBean.setPayMethod(getOpenLcChannel());

            RefundCifParam param = createRefundCifParam(input, input2, adminLcMerCre.getXnMerId());
            param.setReqReserved(JSON.toJSONString(reqReservedBean));

            GeneralTradeResult response = bankTradeService.doTrade(param);

            LcTranStatus tranStatus = LcTranStatusMapper.parseUnionResult(response.getTradeResult());

            RefundKernalOutputBean<CreditParam> outputBean = null;

            if (TradeConfig.TRADE_RESULT_SUCCEED_0.equalsIgnoreCase(response.getTradeResult())) {

                outputBean = BeanFactory.getSucRefundOutputBean();

                // 银连受理成功，还未真实解冻
                tranStatus = LcTranStatus.UNCERTAIN;

            } else {
                outputBean = BeanFactory.getFailRefundOutputBean(response.getResultDesc());
            }

            // 返回结果
            outputBean.setSerialNo(response.getQueryId());
            outputBean.setMessage(response.getResultDesc());
            outputBean.setLcTranStatus(tranStatus);

            CreditParam creditParam = new CreditParam();
            creditParam.setTradeResult(response.getTradeResult());
            creditParam.setResultDesc(response.getResultDesc());
            outputBean.setData(creditParam);

            return outputBean;

        } catch (Exception e) {
            return BeanFactory.getFailRefundOutputBean(e.getMessage());
        }
    }


    /**
     * 查询二级商户号
     *
     * @param merId
     * @return
     * @throws Exception
     */
    protected AdminLcMerCre queryAdminLcMerCreList(String merId) throws Exception {

        List<AdminLcMerCre> adminLcMerCreList = adminLcMerCreDao.selectByMerCodeAndCardType(merId, getCardType());

        if (adminLcMerCreList == null || adminLcMerCreList.size() != 1) {
            throw new Exception("未找到对应的银联二级商户号");
        }

        return adminLcMerCreList.get(0);
    }


    /**
     * @return
     */
    protected abstract int getCardType();

    /**
     * @param inputBean
     * @param unfreezeInputBean
     * @return
     * @throws Exception
     */
    protected abstract PayCifParam createTransferCifParam(TransferInputBean inputBean,
                                                          UnfreezeInputBean unfreezeInputBean) throws Exception;

    protected abstract ExpiryCifParam createExpiryCifParam(InvalidateLcKernelInputBean invalidateLcInputBean,
                                                           ExpiryInputBean expiryInputBean) throws Exception;

    protected abstract RefundCifParam createRefundCifParam(RefundLcInputBean input, RefundKernalInputBean refundKernalInputBean, String subMerId) throws Exception;
}
